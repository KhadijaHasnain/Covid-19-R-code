# Convert 'date'
covid19_data$Date <- as.Date(covid19_data$Date, format = "%m/%d/%Y")
# Filter data for the last day (05/05/2020)
lastDay_data <- covid19_data %>%
filter(Date == as.Date("2020-05-05"))
# View
head(lastDay_data)
# Top 10 countries with the highest number of active cases
top10activeW <- lastDay_data %>%
arrange(desc(Active)) %>%
head(10)
# Top 10 countries with the highest total confirmed cases
top10casesW <- lastDay_data %>%
arrange(desc(CumCases)) %>%
head(10)
# Top 10 countries with the highest fatality rate
top10fatalityW <- lastDay_data %>%
arrange(desc(FatalityRate)) %>%
head(10)
# Top 10 countries with the highest number of tests conducted per million
top10testsMW <- lastDay_data %>%
arrange(desc(Tests_1M_Pop)) %>%
head(10)
# View
head(top10activeW)
head(top10casesW)
head(top10fatalityW)
head(top10testsMW)
# Group the data by continent
continent_totals <- lastDay_data %>%
group_by(continent) %>%
summarise(
total_confirmed_cases = sum(CumCases, na.rm = TRUE),
total_deaths = sum(CumDeaths, na.rm = TRUE),
total_recovered = sum(CumRecovered, na.rm = TRUE),
total_tests = sum(CumTests, na.rm = TRUE)
)
# Print
print(continent_totals)
lastDay_data <- filter(covid19_data, Date == as.Date("2020-05-05"))
names(covid19_data)
top10_countries <- lastDay_data %>%
arrange(desc(CumCases)) %>%
head(10) %>%
dplyr::select(Country.Region)
# top 10 countries
top10_data <- covid19_data %>%
filter(Country.Region %in% top10_countries$Country.Region)
# Create a line plot
ggplot(top10_data, aes(x = Date, y = CumCases, color = Country.Region)) +
geom_line() +
scale_y_log10() +  # Apply log
labs(
x = "Date",
y = "Cumulative Cases (Log Scale)",
title = "Cumulative COVID-19 Cases Over Time (Top 10 Countries)",
color = "Country"
) +
theme_minimal()
#top topcases countries with highest active cases
top10active_data <- top10_data
top10testsMW <- top10active_data
# Add the columns
columns_to_plot <- c("new_cases", "new_deaths", "Recovered")
# Dataframe for ggplot
top10active_long <- top10active_data %>%
select(Country.Region, Date, columns_to_plot) %>%
pivot_longer(cols = columns_to_plot, names_to = "Variable", values_to = "Value")
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
merged_data$Date <- as.Date(covid19_data$Date)
# Group by date
daily_deaths <- merged_data %>%
group_by(Date) %>%
summarise(total_deaths = sum(new_deaths, na.rm = TRUE))
# Find the day with the highest death
max_death_day <- daily_deaths %>%
filter(total_deaths == max(total_deaths, na.rm = TRUE)) %>%
#dplyr::select(Date, total_deaths)
#select(Date, total_deaths)
print(max_death_day)
# Convert 'date' column to Date format
covid19_data$Date <- as.Date(covid19_data$Date, format = "%m/%d/%Y")
# Arrange data by Date
covid19_data <- covid19_data %>% arrange(Date)
# Calculate cumulative counts
covid19_data <- covid19_data %>%
mutate(CumCases = cumsum(new_cases),
CumDeaths = cumsum(new_deaths),
CumRecovered = cumsum(Recovered),
CumTests = cumsum(NewTests))
# Plot the cumulative data over time
ggplot(covid19_data, aes(x = Date)) +
geom_line(aes(y = CumCases, color = "Infected Cases"), linewidth = 1) +
geom_line(aes(y = CumDeaths, color = "Deaths"), linewidth = 1) +
geom_line(aes(y = CumRecovered, color = "Recovered"), linewidth = 1) +
geom_line(aes(y = CumTests, color = "Tests"), linewidth = 1) +
scale_y_log10() +  # Use logarithmic
labs(x = "Date", y = "Cumulative Count (log scale)", color = "Metric") +
theme_minimal() +  # Minimalist theme
theme(legend.position = "top")
# Convert 'date'
covid19_data$Date <- as.Date(covid19_data$Date, format = "%m/%d/%Y")
# Filter data for the last day (05/05/2020)
lastDay_data <- covid19_data %>%
filter(Date == as.Date("2020-05-05"))
# View
head(lastDay_data)
# Top 10 countries with the highest number of active cases
top10activeW <- lastDay_data %>%
arrange(desc(Active)) %>%
head(10)
# Top 10 countries with the highest total confirmed cases
top10casesW <- lastDay_data %>%
arrange(desc(CumCases)) %>%
head(10)
# Top 10 countries with the highest fatality rate
top10fatalityW <- lastDay_data %>%
arrange(desc(FatalityRate)) %>%
head(10)
# Top 10 countries with the highest number of tests conducted per million
top10testsMW <- lastDay_data %>%
arrange(desc(Tests_1M_Pop)) %>%
head(10)
# View
head(top10activeW)
head(top10casesW)
head(top10fatalityW)
head(top10testsMW)
# Group the data by continent
continent_totals <- lastDay_data %>%
group_by(continent) %>%
summarise(
total_confirmed_cases = sum(CumCases, na.rm = TRUE),
total_deaths = sum(CumDeaths, na.rm = TRUE),
total_recovered = sum(CumRecovered, na.rm = TRUE),
total_tests = sum(CumTests, na.rm = TRUE)
)
# Print
print(continent_totals)
lastDay_data <- filter(covid19_data, Date == as.Date("2020-05-05"))
names(covid19_data)
top10_countries <- lastDay_data %>%
arrange(desc(CumCases)) %>%
head(10) %>%
dplyr::select(Country.Region)
# top 10 countries
top10_data <- covid19_data %>%
filter(Country.Region %in% top10_countries$Country.Region)
# Create a line plot
ggplot(top10_data, aes(x = Date, y = CumCases, color = Country.Region)) +
geom_line() +
scale_y_log10() +  # Apply log
labs(
x = "Date",
y = "Cumulative Cases (Log Scale)",
title = "Cumulative COVID-19 Cases Over Time (Top 10 Countries)",
color = "Country"
) +
theme_minimal()
#top topcases countries with highest active cases
top10active_data <- top10_data
top10testsMW <- top10active_data
# Add the columns
columns_to_plot <- c("new_cases", "new_deaths", "Recovered")
# Dataframe for ggplot
top10active_long <- top10active_data %>%
select(Country.Region, Date, columns_to_plot) %>%
pivot_longer(cols = columns_to_plot, names_to = "Variable", values_to = "Value")
#top topcases countries with highest active cases
top10active_data <- top10_data
top10testsMW <- top10active_data
# Add the columns
columns_to_plot <- c("new_cases", "new_deaths", "Recovered")
# Dataframe for ggplot
top10active_long <- top10active_data %>%
dplyr::select(Country.Region, Date, columns_to_plot) %>%
pivot_longer(cols = columns_to_plot, names_to = "Variable", values_to = "Value")
# Create the plot
ggplot(top10active_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
scale_y_log10() +  # Apply log
facet_wrap(~ Country.Region, scales = "free_y") +
labs(
x = "Date",
y = "Count (Log Scale)",
title = "Trends of New Cases, Deaths, and Recoveries Over Time",
color = "Variable"
) +
theme_minimal()
# Top 10 countries and reorder based on Tests_1M_Pop (descending order)
top10testsMW <- top10casesW[order(-top10casesW$Tests_1M_Pop), ]
# Bar plot for the top 10 countries
ggplot(top10testsMW, aes(x = reorder(Country.Region, -Tests_1M_Pop))) +
geom_col(aes(y = Cases_1M_Pop, fill = "Infected Cases"), width = 0.4, position = position_dodge(width = 0.8)) +
geom_col(aes(y = Tests_1M_Pop, fill = "Tests Per Million"), width = 0.4, position = position_dodge(width = 0.8)) +
geom_text(aes(label = Cases_1M_Pop, y = Cases_1M_Pop + 50), vjust = -0.5, size = 3, color = "black", position = position_dodge(width = 0.8)) +
geom_text(aes(label = Tests_1M_Pop, y = Tests_1M_Pop + 50), vjust = -0.5, size = 3, color = "black", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("Infected Cases" = "red", "Tests Per Million" = "blue")) +
labs(
x = "Country",
y = "Count",
title = "Top 10 Countries with Highest Total Tests Per Million Population",
fill = "Category"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"))
# Calculate total, average, and median confirmed cases
summary_data <- covid19_data %>%
group_by(continent) %>%
summarise(Total_Cases = sum(CumCases),
Average_Cases = mean(CumCases),
Median_Cases = median(CumCases))
# Create plot visualization
ggplot(summary_data, aes(x = continent, y = Total_Cases)) +
geom_bar(stat = "identity", aes(fill = "Total Cases"), position = position_dodge()) +
geom_point(aes(y = Average_Cases, color = "Average Cases"), size = 3, position = position_dodge(width = 0.5)) +
geom_point(aes(y = Median_Cases, color = "Median Cases"), size = 3, position = position_dodge(width = 0.5)) +
scale_fill_manual(values = "blue", guide = FALSE) +
scale_color_manual(values = c("red", "green")) +
scale_y_log10() +  # Use log scale for y-axis
labs(
x = "Continent",
y = "Confirmed Cases (Log Scale)",
title = "Statistics of Confirmed Cases by Continent",
fill = "Statistic",
color = "Statistic"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top",  # Position legend at the top
legend.title = element_blank(),  # Remove legend title
legend.key.size = unit(1, "cm"))  # Adjust legend key size
# Group data by Continent and Country
continent_country_deaths <- lastDay_data %>%
group_by(continent, Country.Region) %>%
summarise(Total_Deaths = sum(CumDeaths), .groups = "drop")
# Arrange data
continent_country_deaths_sorted <- continent_country_deaths %>%
arrange(continent, desc(Total_Deaths))
# Select the top 2 countries with the highest death toll
top_countries_by_continent <- continent_country_deaths_sorted %>%
group_by(continent) %>%
slice_max(order_by = Total_Deaths, n = 2)
# View
print(top_countries_by_continent)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
merged_data$Date <- as.Date(covid19_data$Date)
# Group by date
daily_deaths <- merged_data %>%
group_by(Date) %>%
summarise(total_deaths = sum(new_deaths, na.rm = TRUE))
# Find the day with the highest death
max_death_day <- daily_deaths %>%
filter(total_deaths == max(total_deaths, na.rm = TRUE)) %>%
#dplyr::select(Date, total_deaths)
#select(Date, total_deaths)
print(max_death_day)
# Convert 'date' column to Date format
covid19_data$Date <- as.Date(covid19_data$Date, format = "%m/%d/%Y")
# Arrange data by Date
covid19_data <- covid19_data %>% arrange(Date)
# Calculate cumulative counts
covid19_data <- covid19_data %>%
mutate(CumCases = cumsum(new_cases),
CumDeaths = cumsum(new_deaths),
CumRecovered = cumsum(Recovered),
CumTests = cumsum(NewTests))
# Plot the cumulative data over time
ggplot(covid19_data, aes(x = Date)) +
geom_line(aes(y = CumCases, color = "Infected Cases"), linewidth = 1) +
geom_line(aes(y = CumDeaths, color = "Deaths"), linewidth = 1) +
geom_line(aes(y = CumRecovered, color = "Recovered"), linewidth = 1) +
geom_line(aes(y = CumTests, color = "Tests"), linewidth = 1) +
scale_y_log10() +  # Use logarithmic
labs(x = "Date", y = "Cumulative Count (log scale)", color = "Metric") +
theme_minimal() +  # Minimalist theme
theme(legend.position = "top")
# Convert 'date'
covid19_data$Date <- as.Date(covid19_data$Date, format = "%m/%d/%Y")
# Filter data for the last day (05/05/2020)
lastDay_data <- covid19_data %>%
filter(Date == as.Date("2020-05-05"))
# View
head(lastDay_data)
# Top 10 countries with the highest number of active cases
top10activeW <- lastDay_data %>%
arrange(desc(Active)) %>%
head(10)
# Top 10 countries with the highest total confirmed cases
top10casesW <- lastDay_data %>%
arrange(desc(CumCases)) %>%
head(10)
# Top 10 countries with the highest fatality rate
top10fatalityW <- lastDay_data %>%
arrange(desc(FatalityRate)) %>%
head(10)
# Top 10 countries with the highest number of tests conducted per million
top10testsMW <- lastDay_data %>%
arrange(desc(Tests_1M_Pop)) %>%
head(10)
# View
head(top10activeW)
head(top10casesW)
head(top10fatalityW)
head(top10testsMW)
# Group the data by continent
continent_totals <- lastDay_data %>%
group_by(continent) %>%
summarise(
total_confirmed_cases = sum(CumCases, na.rm = TRUE),
total_deaths = sum(CumDeaths, na.rm = TRUE),
total_recovered = sum(CumRecovered, na.rm = TRUE),
total_tests = sum(CumTests, na.rm = TRUE)
)
# Print
print(continent_totals)
lastDay_data <- filter(covid19_data, Date == as.Date("2020-05-05"))
names(covid19_data)
top10_countries <- lastDay_data %>%
arrange(desc(CumCases)) %>%
head(10) %>%
dplyr::select(Country.Region)
# top 10 countries
top10_data <- covid19_data %>%
filter(Country.Region %in% top10_countries$Country.Region)
# Create a line plot
ggplot(top10_data, aes(x = Date, y = CumCases, color = Country.Region)) +
geom_line() +
scale_y_log10() +  # Apply log
labs(
x = "Date",
y = "Cumulative Cases (Log Scale)",
title = "Cumulative COVID-19 Cases Over Time (Top 10 Countries)",
color = "Country"
) +
theme_minimal()
#top topcases countries with highest active cases
top10active_data <- top10_data
top10testsMW <- top10active_data
# Add the columns
columns_to_plot <- c("new_cases", "new_deaths", "Recovered")
# Dataframe for ggplot
top10active_long <- top10active_data %>%
dplyr::select(Country.Region, Date, columns_to_plot) %>%
pivot_longer(cols = columns_to_plot, names_to = "Variable", values_to = "Value")
# Create the plot
ggplot(top10active_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
scale_y_log10() +  # Apply log
facet_wrap(~ Country.Region, scales = "free_y") +
labs(
x = "Date",
y = "Count (Log Scale)",
title = "Trends of New Cases, Deaths, and Recoveries Over Time",
color = "Variable"
) +
theme_minimal()
# Top 10 countries and reorder based on Tests_1M_Pop (descending order)
top10testsMW <- top10casesW[order(-top10casesW$Tests_1M_Pop), ]
# Bar plot for the top 10 countries
ggplot(top10testsMW, aes(x = reorder(Country.Region, -Tests_1M_Pop))) +
geom_col(aes(y = Cases_1M_Pop, fill = "Infected Cases"), width = 0.4, position = position_dodge(width = 0.8)) +
geom_col(aes(y = Tests_1M_Pop, fill = "Tests Per Million"), width = 0.4, position = position_dodge(width = 0.8)) +
geom_text(aes(label = Cases_1M_Pop, y = Cases_1M_Pop + 50), vjust = -0.5, size = 3, color = "black", position = position_dodge(width = 0.8)) +
geom_text(aes(label = Tests_1M_Pop, y = Tests_1M_Pop + 50), vjust = -0.5, size = 3, color = "black", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("Infected Cases" = "red", "Tests Per Million" = "blue")) +
labs(
x = "Country",
y = "Count",
title = "Top 10 Countries with Highest Total Tests Per Million Population",
fill = "Category"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"))
# Calculate total, average, and median confirmed cases
summary_data <- covid19_data %>%
group_by(continent) %>%
summarise(Total_Cases = sum(CumCases),
Average_Cases = mean(CumCases),
Median_Cases = median(CumCases))
# Create plot visualization
ggplot(summary_data, aes(x = continent, y = Total_Cases)) +
geom_bar(stat = "identity", aes(fill = "Total Cases"), position = position_dodge()) +
geom_point(aes(y = Average_Cases, color = "Average Cases"), size = 3, position = position_dodge(width = 0.5)) +
geom_point(aes(y = Median_Cases, color = "Median Cases"), size = 3, position = position_dodge(width = 0.5)) +
scale_fill_manual(values = "blue", guide = FALSE) +
scale_color_manual(values = c("red", "green")) +
scale_y_log10() +  # Use log scale for y-axis
labs(
x = "Continent",
y = "Confirmed Cases (Log Scale)",
title = "Statistics of Confirmed Cases by Continent",
fill = "Statistic",
color = "Statistic"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top",  # Position legend at the top
legend.title = element_blank(),  # Remove legend title
legend.key.size = unit(1, "cm"))  # Adjust legend key size
# Group data by Continent and Country
continent_country_deaths <- lastDay_data %>%
group_by(continent, Country.Region) %>%
summarise(Total_Deaths = sum(CumDeaths), .groups = "drop")
# Arrange data
continent_country_deaths_sorted <- continent_country_deaths %>%
arrange(continent, desc(Total_Deaths))
# Select the top 2 countries with the highest death toll
top_countries_by_continent <- continent_country_deaths_sorted %>%
group_by(continent) %>%
slice_max(order_by = Total_Deaths, n = 2)
# View
print(top_countries_by_continent)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(dplyr)
library(corrplot)
library(ggplot2)
library(caret)
library(caret)
library(MASS)
library(ggplot2)
library(lattice)
cor_data <- covid19_data %>%
select(Country.Region, CumCases, CumTests, Population, GDP, GDPCapita) %>%
ungroup()
# Load necessary libraries
library(dplyr)
library(corrplot)
library(ggplot2)
library(caret)
library(MASS)
library(lattice)
cor_data <- covid19_data %>%
dplyr::select(Country.Region, CumCases, CumTests, Population, GDP, GDPCapita) %>%
ungroup()
# View
head(cor_data)
correlation_matrix <- cor(select(cor_data, -Country.Region))
correlation_matrix <- cor(dplyr::select(cor_data, -Country.Region))
# Visualize correlation matrix
corrplot(correlation_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, diag = FALSE)
color_bar <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
legend_colors <- color_bar(100)
corrplot(correlation_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, diag = FALSE, col = legend_colors)
# Plot cumulative cases without log
ggplot(cor_data, aes(x = CumCases)) +
geom_histogram(binwidth = 50000, fill = "skyblue", color = "black") +
labs(title = "Distribution of Cumulative Cases (No Log Transformation)",
x = "Cumulative Cases",
y = "Frequency") +
theme_minimal()
# Plot cumulative cases with log
ggplot(cor_data, aes(x = log(CumCases))) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black") +
labs(title = "Distribution of Cumulative Cases (Log Transformation)",
x = "Log(Cumulative Cases)",
y = "Frequency") +
theme_minimal()
# Set the seed
set.seed(123)
# Determine the number of rows for the training set
train_size <- floor(0.65 * nrow(cor_data))
train_index <- createDataPartition(y = cor_data$CumCases, p = 0.65, list = FALSE)
# Create the training and testing datasets
training_data <- cor_data[train_index, ]
testing_data <- cor_data[-train_index, ]
# Check the dimensions of the training and testing datasets
dim(training_data)
dim(testing_data)
# Train the Linear Regression Model
# Use lm() function
lm_model <- lm(CumCases ~ GDP, data = training_data)
# Evaluate the Model
predictions <- predict(lm_model, newdata = testing_data)
# Calculate RMSE
rmse <- sqrt(mean((testing_data$CumCases - predictions)^2))
# Print
print(paste("Root Mean Squared Error (RMSE):", rmse))
# Split data into training and testing sets
set.seed(123)
train_index <- sample(1:nrow(cor_data), 0.65 * nrow(cor_data))  # 65% for training
# Create training and testing data
train_data <- cor_data[train_index, ]
test_data <- cor_data[-train_index, ]
# Train a linear regression model to predict CumCases from GDP
model_gdp <- lm(CumCases ~ GDP, data = train_data)
predictions <- predict(model_gdp, newdata = test_data)
# Calculate RMSE
rmse <- sqrt(mean((test_data$CumCases - predictions)^2))
# Print RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))
